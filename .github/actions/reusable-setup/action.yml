# Reusable Setup Workflow - Common setup tasks for all workflows
# Provides: Go setup, Docker setup, dependency caching, configuration loading

name: üîß Reusable Setup

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: false
        default: '1.24'
        type: string
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
      setup-docker:
        description: 'Setup Docker Buildx'
        required: false
        default: false
        type: boolean
      setup-k8s:
        description: 'Setup Kubernetes tools'
        required: false
        default: false
        type: boolean
      cache-prefix:
        description: 'Cache key prefix'
        required: false
        default: 'default'
        type: string
    outputs:
      go-version:
        description: 'Go version that was set up'
        value: ${{ jobs.setup.outputs.go-version }}
      config-hash:
        description: 'Configuration hash for cache keys'
        value: ${{ jobs.setup.outputs.config-hash }}
      vault-version:
        description: 'Vault version from config'
        value: ${{ jobs.setup.outputs.vault-version }}
      k3s-version:
        description: 'K3s version from config'
        value: ${{ jobs.setup.outputs.k3s-version }}
jobs:
  setup:
    name: üöÄ Environment Setup
    runs:
      using: "composite"
    outputs:
      go-version: ${{ steps.versions.outputs.go-version }}
      config-hash: ${{ steps.config.outputs.hash }}
      vault-version: ${{ steps.config.outputs.vault-version }}
      k3s-version: ${{ steps.config.outputs.k3s-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Load and validate configuration
        id: config
        run: |
          echo "üìã Loading test configuration..."

          # Load configuration from our config system
          if [[ -f "tests/config/versions.yaml" ]]; then
            # Extract versions from YAML (simplified parsing)
            VAULT_VERSION=$(grep -A5 "vault:" tests/config/versions.yaml | grep "default:" | cut -d'"' -f2 || echo "1.19.0")
            K3S_VERSION=$(grep -A5 "k3s:" tests/config/versions.yaml | grep "default:" | cut -d'"' -f2 || echo "v1.30.8-k3s1")
          else
            echo "‚ö†Ô∏è Config file not found, using defaults"
            VAULT_VERSION="1.19.0"
            K3S_VERSION="v1.30.8-k3s1"
          fi

          # Allow environment variable overrides
          VAULT_VERSION=${VAULT_VERSION:-"1.19.0"}
          K3S_VERSION=${K3S_VERSION:-"v1.30.8-k3s1"}

          echo "vault-version=$VAULT_VERSION" >> $GITHUB_OUTPUT
          echo "k3s-version=$K3S_VERSION" >> $GITHUB_OUTPUT

          # Generate config hash for cache keys
          CONFIG_HASH=$(echo "$VAULT_VERSION-$K3S_VERSION-${{ inputs.go-version }}" | sha256sum | cut -d' ' -f1 | head -c8)
          echo "hash=$CONFIG_HASH" >> $GITHUB_OUTPUT

          echo "‚úÖ Configuration loaded:"
          echo "  Vault: $VAULT_VERSION"
          echo "  K3s: $K3S_VERSION"
          echo "  Config Hash: $CONFIG_HASH"

      - name: Set version outputs
        id: versions
        run: |
          echo "go-version=${{ inputs.go-version }}" >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          cache: true
          cache-dependency-path: |
            go.sum
            tests/go.sum

      #      - name: Setup Node.js
      #        if: inputs.node-version != ''
      #        uses: actions/setup-node@v4
      #        with:
      #          node-version: ${{ inputs.node-version }}
      #          cache: 'npm'
      #          cache-dependency-path: '**/package-lock.json'
      #
      #      - name: Setup Docker Buildx
      #        if: inputs.setup-docker == true
      #        uses: docker/setup-buildx-action@v3
      #        with:
      #          driver-opts: network=host
      #
      #      - name: Setup Kubernetes tools
      #        if: inputs.setup-k8s == true
      #        run: |
      #          echo "üîß Installing Kubernetes tools..."
      #
      #          # Install kubectl
      #          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      #          chmod +x kubectl
      #          sudo mv kubectl /usr/local/bin/
      #
      #          # Install Helm
      #          curl https://get.helm.sh/helm-v3.14.0-linux-amd64.tar.gz | tar -xz
      #          sudo mv linux-amd64/helm /usr/local/bin/
      #
      #          # Install k3d
      #          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      #
      #          echo "‚úÖ Kubernetes tools installed"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.cache-prefix }}-${{ steps.config.outputs.hash }}-${{ hashFiles('go.mod', 'go.sum', 'tests/go.mod', 'tests/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.cache-prefix }}-${{ steps.config.outputs.hash }}-
            ${{ runner.os }}-go-${{ inputs.cache-prefix }}-

      - name: Download Go dependencies
        run: |
          echo "üì¶ Downloading Go dependencies..."
          go mod download
          if [[ -f "tests/go.mod" ]]; then
            cd tests && go mod download
          fi

      - name: Verify environment
        run: |
          echo "üîç Environment verification:"
          echo "  Go version: $(go version)"
          echo "  Cache prefix: ${{ inputs.cache-prefix }}"
          echo "  Config hash: ${{ steps.config.outputs.hash }}"
