name: Multi-Platform Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish'
        required: true
        type: string

jobs:
  publish-docker-hub:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: panteparak/vault-autounseal-operator
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  publish-quay:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Quay.io
      uses: docker/login-action@v3
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: quay.io/panteparak/vault-autounseal-operator
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest

    - name: Build and push to Quay.io
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  publish-helm:
    runs-on: ubuntu-latest
    needs: [publish-docker-hub]
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Create Helm Chart
      run: |
        mkdir -p helm-chart/vault-autounseal-operator/templates
        
        # Create Chart.yaml
        cat > helm-chart/vault-autounseal-operator/Chart.yaml << EOF
        apiVersion: v2
        name: vault-autounseal-operator
        description: A Kubernetes operator for HashiCorp Vault auto-unsealing
        version: ${GITHUB_REF#refs/tags/v}
        appVersion: ${GITHUB_REF#refs/tags/v}
        home: https://github.com/panteparak/vault-autounseal-operator
        sources:
          - https://github.com/panteparak/vault-autounseal-operator
        maintainers:
          - name: panteparak
            email: your-email@example.com
        keywords:
          - vault
          - unsealing
          - hashicorp
          - kubernetes
          - operator
        EOF
        
        # Create values.yaml
        cat > helm-chart/vault-autounseal-operator/values.yaml << EOF
        replicaCount: 1
        
        image:
          repository: panteparak/vault-autounseal-operator
          tag: ${GITHUB_REF#refs/tags/v}
          pullPolicy: IfNotPresent
        
        nameOverride: ""
        fullnameOverride: ""
        
        serviceAccount:
          create: true
          name: vault-autounseal-operator
        
        rbac:
          create: true
        
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        
        nodeSelector: {}
        tolerations: []
        affinity: {}
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          readOnlyRootFilesystem: true
        EOF
        
        # Create templates
        cp manifests/crd.yaml helm-chart/vault-autounseal-operator/templates/
        
        # Create deployment template
        cat > helm-chart/vault-autounseal-operator/templates/deployment.yaml << 'EOF'
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: {{ include "vault-autounseal-operator.fullname" . }}
          namespace: {{ .Values.namespace | default "vault-operator" }}
          labels:
            {{- include "vault-autounseal-operator.labels" . | nindent 4 }}
        spec:
          replicas: {{ .Values.replicaCount }}
          selector:
            matchLabels:
              {{- include "vault-autounseal-operator.selectorLabels" . | nindent 6 }}
          template:
            metadata:
              labels:
                {{- include "vault-autounseal-operator.selectorLabels" . | nindent 8 }}
            spec:
              serviceAccountName: {{ .Values.serviceAccount.name }}
              securityContext:
                {{- toYaml .Values.securityContext | nindent 8 }}
              containers:
              - name: operator
                image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                imagePullPolicy: {{ .Values.image.pullPolicy }}
                command: ["vault-operator", "run"]
                resources:
                  {{- toYaml .Values.resources | nindent 10 }}
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop: ["ALL"]
                  readOnlyRootFilesystem: true
                  runAsNonRoot: true
                  runAsUser: 65534
        EOF

    - name: Package Helm Chart
      run: |
        helm package helm-chart/vault-autounseal-operator

    - name: Create GitHub Release with Helm Chart
      uses: softprops/action-gh-release@v1
      with:
        files: |
          vault-autounseal-operator-*.tgz
        tag_name: ${{ github.ref_name }}

  publish-artifact-hub:
    runs-on: ubuntu-latest
    needs: [publish-helm]
    
    steps:
    - name: Notify Artifact Hub
      run: |
        # Artifact Hub will automatically discover the Helm chart from the GitHub release
        echo "Helm chart published to GitHub releases - Artifact Hub will discover it automatically"