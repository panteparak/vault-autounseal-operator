name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"

    - name: Lint with ruff
      run: |
        ruff check src/ tests/

    - name: Format check with black
      run: |
        black --check src/ tests/

    - name: Type check with mypy
      run: |
        pip install mypy types-PyYAML types-requests
        mypy src/vault_autounseal_operator --ignore-missing-imports

    - name: Security check with bandit
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o security-report.json || true

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src/vault_autounseal_operator --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"

    - name: Run security tests
      run: |
        pytest tests/test_security*.py -v

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v

  crd-validation:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        uv pip install --system -e .

    - name: Generate CRD
      run: |
        mkdir -p generated
        vault-operator generate-crd -o generated/crd.yaml
        vault-operator generate-crd --use-kopf -o generated/crd-kopf.yaml

    - name: Validate CRD with kubectl
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Validate CRD syntax
        kubectl apply --dry-run=client -f generated/crd.yaml
        kubectl apply --dry-run=client -f generated/crd-kopf.yaml

    - name: Upload CRD artifacts
      uses: actions/upload-artifact@v4
      with:
        name: generated-crds
        path: generated/

  build-image:
    runs-on: ubuntu-latest
    needs: [test, security-tests, crd-validation]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: vault-autounseal-operator:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm vault-autounseal-operator:${{ github.sha }} vault-operator --help