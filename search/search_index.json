{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vault Auto-Unseal Operator","text":"<p>A production-ready Kubernetes operator for automatically unsealing HashiCorp Vault instances. Built with Go and controller-runtime for high performance, security, and reliability.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>\ud83d\udd10 Automatic Unsealing: Continuously monitors and unseals Vault instances with configurable reconciliation</li> <li>\ud83c\udfd7\ufe0f High Availability: Full support for HA Vault clusters with intelligent pod monitoring</li> <li>\ud83d\udee1\ufe0f Security First: Secure key handling, comprehensive TLS support, input validation, and audit logging</li> <li>\ud83d\udcca Production Ready: Built-in monitoring, Prometheus metrics, health checks, and observability</li> <li>\u26a1 High Performance: Efficient Go implementation with minimal resource footprint</li> <li>\ud83d\udd04 Complete CI/CD: Automated testing, building, packaging, and releasing</li> <li>\ud83d\udcda Comprehensive Docs: Detailed documentation with real-world examples</li> </ul>"},{"location":"#quick-start","title":"\ud83d\udccb Quick Start","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes: v1.25+ with admin access</li> <li>Helm: v3.8+ installed</li> <li>Vault: Initialized HashiCorp Vault instance(s)</li> </ul>"},{"location":"#installation-60-seconds","title":"\ud83c\udfc3\u200d\u2642\ufe0f Installation (60 seconds)","text":"<ol> <li> <p>Install the operator:    <pre><code>helm install vault-autounseal-operator \\\n  oci://ghcr.io/panteparak/vault-autounseal-operator \\\n  --namespace vault-system --create-namespace\n</code></pre></p> </li> <li> <p>Create configuration:    <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: my-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-primary\n    endpoint: https://vault.example.com:8200\n    unsealKeys:\n    - \"base64-encoded-key-1\"\n    - \"base64-encoded-key-2\"\n    - \"base64-encoded-key-3\"\n    threshold: 3\nEOF\n</code></pre></p> </li> <li> <p>Verify it's working:    <pre><code>kubectl get vaultunsealconfigs -n vault-system\nkubectl logs -n vault-system deployment/vault-autounseal-operator\n</code></pre></p> </li> </ol>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Vault Auto-Unseal Operator                   \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510             \u2502\n\u2502  \u2502 Controller  \u2502  \u2502 Vault Client\u2502  \u2502 Pod Watcher \u2502             \u2502\n\u2502  \u2502             \u2502  \u2502             \u2502  \u2502             \u2502             \u2502\n\u2502  \u2502 \u2022 Reconcile \u2502  \u2502 \u2022 TLS/mTLS  \u2502  \u2502 \u2022 HA Support\u2502             \u2502\n\u2502  \u2502 \u2022 Status    \u2502  \u2502 \u2022 Security  \u2502  \u2502 \u2022 Pod Events\u2502             \u2502\n\u2502  \u2502 \u2022 Events    \u2502  \u2502 \u2022 Unsealing \u2502  \u2502 \u2022 Monitoring\u2502             \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510             \u2502\n\u2502  \u2502 Metrics     \u2502  \u2502 Health      \u2502  \u2502 Logging     \u2502             \u2502\n\u2502  \u2502 Prometheus  \u2502  \u2502 Liveness    \u2502  \u2502 Structured  \u2502             \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502              Vault Instances            \u2502\n         \u2502                                         \u2502\n         \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n         \u2502  \u2502Vault #1 \u2502 \u2502Vault #2 \u2502 \u2502Vault #N \u2502    \u2502\n         \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#configuration-examples","title":"\ud83d\udcd6 Configuration Examples","text":"\ud83d\udca1 Single Vault Instance <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: simple-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault\n    endpoint: https://vault.company.com:8200\n    unsealKeys:\n    - \"dGVzdC1rZXktMQ==\"  # base64 encoded\n    - \"dGVzdC1rZXktMg==\"\n    - \"dGVzdC1rZXktMw==\"\n    threshold: 3\n</code></pre> \ud83c\udfd7\ufe0f High Availability Cluster <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: vault-ha-cluster\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-cluster\n    endpoint: https://vault-active.vault.svc.cluster.local:8200\n    unsealKeys: [\"key1\", \"key2\", \"key3\", \"key4\", \"key5\"]\n    threshold: 3\n    haEnabled: true\n    podSelector:\n      app.kubernetes.io/name: vault\n    namespace: vault\n</code></pre> \ud83c\udf10 Multiple Environments <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: multi-env-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-prod\n    endpoint: https://vault-prod.company.com:8200\n    unsealKeys: [\"prod-key-1\", \"prod-key-2\", \"prod-key-3\"]\n    threshold: 3\n  - name: vault-staging\n    endpoint: https://vault-staging.company.com:8200\n    unsealKeys: [\"staging-key-1\", \"staging-key-2\"]\n    threshold: 2\n    tlsSkipVerify: true\n</code></pre> \ud83d\udd10 Using Kubernetes Secrets (Recommended) <pre><code># Create secret with unseal keys\nkubectl create secret generic vault-keys \\\n  --from-literal=key1=\"$(echo -n 'unseal-key-1' | base64)\" \\\n  --from-literal=key2=\"$(echo -n 'unseal-key-2' | base64)\" \\\n  --from-literal=key3=\"$(echo -n 'unseal-key-3' | base64)\" \\\n  --namespace vault-system\n</code></pre> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: secure-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-secure\n    endpoint: https://vault.company.com:8200\n    unsealKeysRef:\n      secretName: vault-keys\n      keys: [\"key1\", \"key2\", \"key3\"]\n    threshold: 3\n</code></pre>"},{"location":"#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":""},{"location":"#prometheus-metrics","title":"Prometheus Metrics","text":"<p>The operator exposes comprehensive metrics on <code>:8080/metrics</code>:</p> Metric Description <code>vault_unseal_attempts_total</code> Total unseal attempts <code>vault_unseal_successes_total</code> Successful unseals <code>vault_unseal_failures_total</code> Failed unseal attempts <code>vault_instances_sealed</code> Currently sealed instances <code>vault_reconcile_duration_seconds</code> Reconciliation duration"},{"location":"#health-checks","title":"Health Checks","text":"<ul> <li>Liveness: <code>:8081/healthz</code> - Operator health</li> <li>Readiness: <code>:8081/readyz</code> - Ready to serve requests</li> </ul>"},{"location":"#grafana-dashboard","title":"Grafana Dashboard","text":"<p>Import our pre-built dashboard from <code>examples/grafana-dashboard.json</code>.</p>"},{"location":"#security","title":"\ud83d\udee1\ufe0f Security","text":"<p>Security is our top priority:</p> <ul> <li>\u2705 Secure Key Storage: Kubernetes secrets integration</li> <li>\u2705 Input Validation: Comprehensive config validation</li> <li>\u2705 TLS Support: Full certificate verification</li> <li>\u2705 Non-root Execution: Runs as UID 65532</li> <li>\u2705 Read-only Filesystem: Immutable container filesystem</li> <li>\u2705 Audit Logging: Complete operation audit trail</li> <li>\u2705 Minimal RBAC: Least-privilege permissions</li> <li>\u2705 Security Scanning: Automated vulnerability detection</li> </ul>"},{"location":"#security-best-practices","title":"\ud83d\udd12 Security Best Practices","text":"<ol> <li>Never store unseal keys in plain YAML</li> <li>Always use Kubernetes secrets</li> <li>Enable TLS verification in production</li> <li>Monitor all operator activities</li> <li>Use network policies to restrict access</li> <li>Regularly rotate unseal keys</li> </ol>"},{"location":"#development","title":"\ud83d\udee0\ufe0f Development","text":""},{"location":"#local-development-setup","title":"Local Development Setup","text":"<pre><code># Clone and setup\ngit clone https://github.com/panteparak/vault-autounseal-operator.git\ncd vault-autounseal-operator\n\n# Install dependencies\ngo mod download\n\n# Run tests\nmake test\n\n# Build binary\nmake build\n\n# Run locally (requires kubeconfig)\n./bin/manager --metrics-bind-address=:8080 --health-probe-bind-address=:8081\n</code></pre>"},{"location":"#testing","title":"\ud83e\uddea Testing","text":"<pre><code># Unit tests\nmake test\n\n# Integration tests\nmake test-integration\n\n# Security scan\nmake security-scan\n\n# Coverage report\nmake test-coverage\n</code></pre>"},{"location":"#cicd-pipeline","title":"\ud83d\ude80 CI/CD Pipeline","text":"<p>Our automated pipeline handles:</p> <ul> <li>\ud83e\uddf9 Code Quality: <code>gofmt</code>, <code>goimports</code>, <code>go vet</code>, <code>staticcheck</code></li> <li>\ud83d\udd12 Security: <code>gosec</code>, <code>trivy</code>, vulnerability scanning</li> <li>\ud83e\uddea Testing: Unit tests, integration tests, race detection</li> <li>\ud83c\udfd7\ufe0f Building: Multi-arch Docker images (amd64/arm64)</li> <li>\ud83d\udce6 Packaging: Automated Helm chart packaging with CRDs</li> <li>\ud83d\udea2 Releases: Semantic versioning with conventional commits</li> <li>\ud83c\udff7\ufe0f Tagging: Auto-generated tags and changelogs</li> </ul>"},{"location":"#release-process","title":"\ud83d\udd04 Release Process","text":"<p>Releases are fully automated using semantic versioning:</p>"},{"location":"#commit-types-release-types","title":"Commit Types \u2192 Release Types","text":"<ul> <li><code>feat:</code> \u2192 Minor release (0.1.0 \u2192 0.2.0)</li> <li><code>fix:</code> \u2192 Patch release (0.1.0 \u2192 0.1.1)</li> <li><code>feat!:</code> or <code>BREAKING CHANGE:</code> \u2192 Major release (0.1.0 \u2192 1.0.0)</li> </ul>"},{"location":"#automated-release-features","title":"Automated Release Features","text":"<ul> <li>\ud83c\udff7\ufe0f Auto-versioning based on conventional commits</li> <li>\ud83d\udcdd Generated changelogs with categorized changes</li> <li>\ud83d\udc33 Tagged Docker images (<code>latest</code> + version tags)</li> <li>\ud83d\udce6 Helm chart packaging with embedded CRDs</li> <li>\ud83d\udd12 Security scanning of release artifacts</li> <li>\ud83d\ude80 GitHub releases with installation scripts</li> </ul>"},{"location":"#making-a-release","title":"Making a Release","text":"<p>Simply push commits with conventional commit messages to <code>main</code>:</p> <pre><code># Feature release (0.1.0 \u2192 0.2.0)\ngit commit -m \"feat: add new unsealing strategy for HA clusters\"\n\n# Bug fix release (0.1.0 \u2192 0.1.1)\ngit commit -m \"fix: resolve memory leak in vault client\"\n\n# Breaking change release (0.1.0 \u2192 1.0.0)\ngit commit -m \"feat!: redesign API for better performance\"\n\n# Push to trigger release\ngit push origin main\n</code></pre>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"Document Description Getting Started Complete setup and configuration guide Configuration Examples Real-world configuration examples Security Guide Security best practices Monitoring Guide Observability and alerting Troubleshooting Common issues and solutions API Reference Complete API documentation"},{"location":"#faq","title":"\u2753 FAQ","text":"How does the operator handle HA Vault clusters?  The operator monitors individual pods in HA clusters using label selectors and automatically unseals new pods as they start, ensuring seamless failover.  What happens if unseal keys are incorrect?  The operator logs detailed error messages and continues attempting according to the reconciliation schedule. Status is updated in the VaultUnsealConfig resource.  Can I manage Vault instances across namespaces?  Yes! The operator supports cross-namespace monitoring with proper RBAC configuration.  Is this production-ready?  Absolutely. The operator includes comprehensive security, monitoring, error handling, and has been designed following production best practices.  How do I migrate from the Python version?  The Go version is a complete rewrite with the same API. Simply update your Helm deployment and your existing VaultUnsealConfig resources will work unchanged."},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide.</p>"},{"location":"#development-workflow","title":"Development Workflow","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Add tests for new functionality</li> <li>Run <code>make test</code> and ensure everything passes</li> <li>Submit a pull request</li> </ol>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":"<ul> <li>HashiCorp for creating Vault</li> <li>Kubernetes SIG for controller-runtime</li> <li>The amazing Go community for excellent tooling and libraries</li> </ul>   **\u2b50 If this project helps you, please give it a star! \u2b50**  [Report Bug](https://github.com/panteparak/vault-autounseal-operator/issues) \u00b7 [Request Feature](https://github.com/panteparak/vault-autounseal-operator/issues) \u00b7 [Documentation](docs/) \u00b7 [Discussions](https://github.com/panteparak/vault-autounseal-operator/discussions)"},{"location":"ARCHITECTURE/","title":"Architecture Documentation","text":""},{"location":"ARCHITECTURE/#overview","title":"Overview","text":"<p>The Vault Autounseal Operator has been refactored from a layer-based architecture to a feature-based architecture. This change improves code organization, maintainability, and domain separation.</p>"},{"location":"ARCHITECTURE/#previous-architecture-layer-based","title":"Previous Architecture (Layer-Based)","text":"<pre><code>pkg/\n\u251c\u2500\u2500 api/v1/          # API layer\n\u251c\u2500\u2500 controller/      # Controller layer\n\u2514\u2500\u2500 vault/           # Vault client layer\n</code></pre> <p>Problems with layer-based approach: - Cross-cutting concerns scattered across layers - Business logic mixed with technical concerns - Difficult to understand feature boundaries - High coupling between layers</p>"},{"location":"ARCHITECTURE/#new-architecture-feature-based","title":"New Architecture (Feature-Based)","text":"<pre><code>pkg/\n\u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 types/       # Core domain types and interfaces\n\u2502   \u2514\u2500\u2500 config/      # Configuration management\n\u251c\u2500\u2500 unsealing/       # Vault unsealing feature\n\u2502   \u251c\u2500\u2500 client/      # Vault HTTP client\n\u2502   \u251c\u2500\u2500 strategy/    # Unsealing strategies (default, retry, parallel)\n\u2502   \u251c\u2500\u2500 validation/  # Key validation logic\n\u2502   \u2514\u2500\u2500 metrics/     # Unsealing-specific metrics\n\u251c\u2500\u2500 operator/        # Kubernetes operator feature\n\u2502   \u251c\u2500\u2500 crd/         # Custom Resource Definitions\n\u2502   \u251c\u2500\u2500 controller/  # Kubernetes controllers\n\u2502   \u2514\u2500\u2500 reconciler/  # Reconciliation logic\n\u2514\u2500\u2500 testing/         # Shared testing utilities\n    \u251c\u2500\u2500 fixtures/    # Test fixtures and data\n    \u251c\u2500\u2500 mocks/       # Mock implementations\n    \u2514\u2500\u2500 integration/ # Integration test framework\n</code></pre>"},{"location":"ARCHITECTURE/#feature-breakdown","title":"Feature Breakdown","text":""},{"location":"ARCHITECTURE/#1-core-pkgcore","title":"1. Core (<code>pkg/core/</code>)","text":"<p>Purpose: Foundational types and configuration shared across features.</p> <ul> <li><code>types/</code>: Domain interfaces, error types, and core data structures</li> <li><code>interfaces.go</code>: Core interfaces (VaultClient, KeyValidator, UnsealStrategy, etc.)</li> <li> <p><code>errors.go</code>: Custom error types with proper error handling</p> </li> <li> <p><code>config/</code>: Application configuration management</p> </li> <li>Configuration loading and validation</li> <li>Environment variable handling</li> </ul>"},{"location":"ARCHITECTURE/#2-unsealing-pkgunsealing","title":"2. Unsealing (<code>pkg/unsealing/</code>)","text":"<p>Purpose: Everything related to Vault unsealing operations.</p> <ul> <li><code>client/</code>: Vault HTTP client implementation</li> <li><code>client.go</code>: Main Vault client with connection management</li> <li> <p><code>client_test.go</code>: Client unit tests</p> </li> <li> <p><code>strategy/</code>: Different unsealing approaches</p> </li> <li><code>strategy.go</code>: Default, parallel, and retry unsealing strategies</li> <li> <p><code>strategy_test.go</code>: Strategy pattern tests</p> </li> <li> <p><code>validation/</code>: Key validation logic</p> </li> <li><code>validator.go</code>: Default key validation</li> <li><code>strict_validator.go</code>: Enhanced validation with security rules</li> <li> <p><code>validator_test.go</code>: Comprehensive validation tests</p> </li> <li> <p><code>metrics/</code>: Unsealing-specific observability</p> </li> <li>Metrics collection for unsealing operations</li> <li>Performance monitoring</li> </ul>"},{"location":"ARCHITECTURE/#3-operator-pkgoperator","title":"3. Operator (<code>pkg/operator/</code>)","text":"<p>Purpose: Kubernetes operator-specific functionality.</p> <ul> <li><code>crd/</code>: Custom Resource Definition handling</li> <li> <p>VaultUnsealConfig CRD types and validation</p> </li> <li> <p><code>controller/</code>: Kubernetes controllers</p> </li> <li>Reconciliation logic for CRDs</li> <li> <p>Event handling and status updates</p> </li> <li> <p><code>reconciler/</code>: Business logic for reconciliation</p> </li> <li>State management</li> <li>Workflow orchestration</li> </ul>"},{"location":"ARCHITECTURE/#4-testing-pkgtesting","title":"4. Testing (<code>pkg/testing/</code>)","text":"<p>Purpose: Shared testing utilities and frameworks.</p> <ul> <li><code>fixtures/</code>: Test data and fixtures</li> <li>Sample configurations</li> <li> <p>Test keys and certificates</p> </li> <li> <p><code>mocks/</code>: Mock implementations</p> </li> <li> <p><code>mocks.go</code>: Testify-based mocks for all interfaces</p> </li> <li> <p><code>integration/</code>: Integration testing framework</p> </li> <li><code>testcontainers_suite.go</code>: Testcontainers-based integration tests</li> <li>Shared test utilities and helpers</li> </ul>"},{"location":"ARCHITECTURE/#benefits-of-feature-based-architecture","title":"Benefits of Feature-Based Architecture","text":""},{"location":"ARCHITECTURE/#1-domain-clarity","title":"1. Domain Clarity","text":"<ul> <li>Each package represents a distinct business capability</li> <li>Clear boundaries between features</li> <li>Easier to understand system responsibilities</li> </ul>"},{"location":"ARCHITECTURE/#2-reduced-coupling","title":"2. Reduced Coupling","text":"<ul> <li>Features depend on core types/interfaces, not implementations</li> <li>Dependency injection through interfaces</li> <li>Easier to test in isolation</li> </ul>"},{"location":"ARCHITECTURE/#3-improved-maintainability","title":"3. Improved Maintainability","text":"<ul> <li>Related code is co-located</li> <li>Changes to a feature are contained within its package</li> <li>Easier to reason about feature completeness</li> </ul>"},{"location":"ARCHITECTURE/#4-better-testing","title":"4. Better Testing","text":"<ul> <li>Each feature can be tested independently</li> <li>Clear separation of unit vs integration tests</li> <li>Shared testing utilities reduce duplication</li> </ul>"},{"location":"ARCHITECTURE/#5-scalability","title":"5. Scalability","text":"<ul> <li>New features can be added without affecting existing ones</li> <li>Team ownership can be assigned by feature</li> <li>Parallel development is easier</li> </ul>"},{"location":"ARCHITECTURE/#package-dependencies","title":"Package Dependencies","text":"graph TD     A[core/types] --&gt; B[unsealing/client]     A --&gt; C[unsealing/strategy]     A --&gt; D[unsealing/validation]     A --&gt; E[operator/controller]      B --&gt; C     D --&gt; C     C --&gt; E      F[testing/mocks] --&gt; A     G[testing/integration] --&gt; B     G --&gt; C     G --&gt; D"},{"location":"ARCHITECTURE/#interface-design","title":"Interface Design","text":"<p>The architecture relies heavily on interfaces defined in <code>core/types</code>:</p> <pre><code>type VaultClient interface {\n    IsSealed(ctx context.Context) (bool, error)\n    GetSealStatus(ctx context.Context) (*api.SealStatusResponse, error)\n    Unseal(ctx context.Context, keys []string, threshold int) (*api.SealStatusResponse, error)\n    // ... other methods\n}\n\ntype UnsealStrategy interface {\n    Unseal(ctx context.Context, client VaultClient, keys []string, threshold int) (*api.SealStatusResponse, error)\n}\n\ntype KeyValidator interface {\n    ValidateKeys(keys []string, threshold int) error\n    ValidateBase64Key(key string) error\n}\n</code></pre> <p>This design enables: - Dependency injection: Easy to swap implementations - Testing: Mock implementations for unit tests - Extensibility: New strategies/validators without changing existing code</p>"},{"location":"ARCHITECTURE/#migration-guide","title":"Migration Guide","text":""},{"location":"ARCHITECTURE/#for-existing-code","title":"For Existing Code","text":"<ol> <li> <p>Update imports: Change from <code>pkg/vault</code> to specific feature packages:    <pre><code>// Old\nimport \"github.com/example/vault-operator/pkg/vault\"\n\n// New\nimport \"github.com/example/vault-operator/pkg/unsealing/client\"\nimport \"github.com/example/vault-operator/pkg/core/types\"\n</code></pre></p> </li> <li> <p>Interface usage: Use interfaces from <code>core/types</code>:    <pre><code>// Old\nvar client *vault.Client\n\n// New\nvar client types.VaultClient\n</code></pre></p> </li> <li> <p>Factory patterns: Use dependency injection:    <pre><code>// Create client\nclient := client.NewClient(endpoint, tlsSkip, timeout)\n\n// Create validator\nvalidator := validation.NewDefaultKeyValidator()\n\n// Create strategy with dependencies\nstrategy := strategy.NewDefaultUnsealStrategy(validator, metrics)\n</code></pre></p> </li> </ol>"},{"location":"ARCHITECTURE/#for-tests","title":"For Tests","text":"<ol> <li>Use shared mocks: Import from <code>testing/mocks</code></li> <li>Integration tests: Use <code>testing/integration</code> suite</li> <li>Unit tests: Test individual features in isolation</li> </ol>"},{"location":"ARCHITECTURE/#future-enhancements","title":"Future Enhancements","text":"<p>The new architecture enables several future improvements:</p> <ol> <li>Plugin system: Easy to add new unsealing strategies</li> <li>Multi-backend support: Different Vault backends as separate features</li> <li>Advanced observability: Feature-specific metrics and tracing</li> <li>Configuration validation: Enhanced config validation per feature</li> <li>Performance optimization: Feature-specific optimizations</li> </ol>"},{"location":"ARCHITECTURE/#best-practices","title":"Best Practices","text":"<ol> <li>Keep features independent: Avoid cross-feature dependencies</li> <li>Use interfaces: Always depend on abstractions, not implementations</li> <li>Test at the right level: Unit tests for individual features, integration tests for workflows</li> <li>Follow naming conventions: Clear, descriptive package and type names</li> <li>Document interfaces: Clear contracts for all public interfaces</li> </ol>"},{"location":"INTEGRATION_TESTING/","title":"Fast-Failing Integration Testing Framework","text":"<p>A comprehensive integration testing framework designed for rapid feedback and efficient debugging.</p>"},{"location":"INTEGRATION_TESTING/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code># Run with default settings (fast and simple)\n./scripts/run-fast-integration.sh\n\n# Run with verbose debugging\n./scripts/run-fast-integration.sh -d VERBOSE\n\n# Run specific tests with Docker\n./scripts/run-fast-integration.sh -D -f \"Circuit Breaker\" -c\n</code></pre>"},{"location":"INTEGRATION_TESTING/#framework-goals","title":"\ud83c\udfaf Framework Goals","text":""},{"location":"INTEGRATION_TESTING/#1-fail-fast","title":"1. Fail Fast","text":"<ul> <li>Circuit breaker pattern stops tests after consecutive failures</li> <li>Aggressive timeouts prevent hanging tests</li> <li>Health checks ensure environment readiness before testing</li> </ul>"},{"location":"INTEGRATION_TESTING/#2-rich-debugging","title":"2. Rich Debugging","text":"<ul> <li>Multiple debug levels (QUIET, BASIC, VERBOSE, TRACE)</li> <li>Structured JSON logging with timestamps</li> <li>Comprehensive timing analysis</li> <li>Error context and metadata</li> </ul>"},{"location":"INTEGRATION_TESTING/#3-developer-experience","title":"3. Developer Experience","text":"<ul> <li>Quick setup with reasonable defaults</li> <li>Clear, colored output with emojis</li> <li>Progressive timeout strategy</li> <li>Easy Docker integration</li> </ul>"},{"location":"INTEGRATION_TESTING/#performance-comparison","title":"\ud83d\udcca Performance Comparison","text":"Metric Old Framework New Framework Improvement Average test time 45-120s 5-15s 8x faster Failure detection 30-600s 1-3s 100x faster Setup time 60s 5s 12x faster Debug info Minimal Rich Much better"},{"location":"INTEGRATION_TESTING/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"INTEGRATION_TESTING/#environment-variables","title":"Environment Variables","text":"<pre><code># Debug level\nexport INTEGRATION_DEBUG=VERBOSE  # QUIET, BASIC, VERBOSE, TRACE\n\n# Test timeout\nexport GO_TEST_TIMEOUT=60s\n\n# Debug log file\nexport INTEGRATION_DEBUG_LOG=./integration-debug.log\n\n# Use Docker for vault services\nexport USE_DOCKER=true\n</code></pre>"},{"location":"INTEGRATION_TESTING/#test-configuration","title":"Test Configuration","text":"<pre><code>config := &amp;IntegrationTestConfig{\n    QuickTimeout:        1 * time.Second,   // Health checks\n    OperationTimeout:    3 * time.Second,   // Operations\n    MaxTotalTime:        15 * time.Second,  // Total test limit\n    FailureThreshold:    2,                 // Circuit breaker\n    SuccessThreshold:    1,                 // Recovery\n    CooldownPeriod:      500 * time.Millisecond,\n    HealthCheckInterval: 200 * time.Millisecond,\n    MaxUnhealthyTime:    3 * time.Second,\n    MaxConcurrency:      3,\n}\n</code></pre>"},{"location":"INTEGRATION_TESTING/#circuit-breaker-pattern","title":"\ud83d\udd04 Circuit Breaker Pattern","text":"<p>The framework implements a circuit breaker to fail fast:</p> <ol> <li>CLOSED (Normal): Tests run normally</li> <li>OPEN (Failing): After threshold failures, tests fail immediately</li> <li>HALF_OPEN (Testing): After cooldown, try one test to check recovery</li> </ol> <pre><code>// Circuit opens after 2 failures\nconfig.FailureThreshold = 2\n\n// Tests fail immediately when circuit is open\nerr := runner.RunTest(ctx, \"test\", testFunc)\n// Returns: \"circuit breaker integration-tests is OPEN - failing fast\"\n</code></pre>"},{"location":"INTEGRATION_TESTING/#health-checking","title":"\ud83c\udfe5 Health Checking","text":"<p>Tests wait for healthy vault instances before proceeding:</p> <pre><code>runner.RegisterClient(\"vault1\", client1)\nrunner.RegisterClient(\"vault2\", client2)\n\n// Waits up to MaxUnhealthyTime for at least one healthy client\nerr := runner.RunTest(ctx, \"my-test\", func(testCtx context.Context) error {\n    // This only runs if we have healthy clients\n    return doVaultOperation(testCtx)\n})\n</code></pre>"},{"location":"INTEGRATION_TESTING/#debug-levels","title":"\ud83d\udcdd Debug Levels","text":""},{"location":"INTEGRATION_TESTING/#quiet","title":"QUIET","text":"<ul> <li>No output except test results</li> <li>For CI/CD environments</li> </ul>"},{"location":"INTEGRATION_TESTING/#basic","title":"BASIC","text":"<ul> <li>Test pass/fail status</li> <li>Error messages</li> <li>Timing summary</li> </ul>"},{"location":"INTEGRATION_TESTING/#verbose","title":"VERBOSE","text":"<ul> <li>All BASIC content</li> <li>Circuit breaker state changes</li> <li>Health check results</li> <li>Individual operation timing</li> </ul>"},{"location":"INTEGRATION_TESTING/#trace","title":"TRACE","text":"<ul> <li>All VERBOSE content</li> <li>Detailed timeline of events</li> <li>Context information</li> <li>Metadata for all operations</li> </ul>"},{"location":"INTEGRATION_TESTING/#test-structure","title":"\ud83e\uddea Test Structure","text":""},{"location":"INTEGRATION_TESTING/#simple-test","title":"Simple Test","text":"<pre><code>err := runner.RunTestWithDebug(ctx, \"simple-test\", func(testCtx context.Context) error {\n    // Your test logic here\n    return nil\n})\n</code></pre>"},{"location":"INTEGRATION_TESTING/#scenario-based-test","title":"Scenario-Based Test","text":"<pre><code>scenarios := []TestScenario{\n    {\n        Name:        \"health-check\",\n        Description: \"Verify vault is healthy\",\n        Setup: func(ctx context.Context) error {\n            // Setup code\n            return nil\n        },\n        Execute: func(ctx context.Context) error {\n            // Main test logic\n            return nil\n        },\n        Cleanup: func(ctx context.Context) error {\n            // Cleanup code (always runs)\n            return nil\n        },\n        Timeout: 5 * time.Second,\n    },\n}\n\nerr := runner.RunScenariosWithDebug(ctx, scenarios)\n</code></pre>"},{"location":"INTEGRATION_TESTING/#docker-integration","title":"\ud83d\udc33 Docker Integration","text":""},{"location":"INTEGRATION_TESTING/#fast-setup","title":"Fast Setup","text":"<pre><code># docker-compose.fast-integration.yml\nservices:\n  vault-dev:\n    image: hashicorp/vault:1.20.0\n    environment:\n      VAULT_DEV_ROOT_TOKEN_ID: \"root-token\"\n    healthcheck:\n      interval: 1s\n      timeout: 1s\n      retries: 3\n</code></pre>"},{"location":"INTEGRATION_TESTING/#running-with-docker","title":"Running with Docker","text":"<pre><code># Start vault services\n./scripts/run-fast-integration.sh -D\n\n# Clean up after tests\n./scripts/run-fast-integration.sh -D -c\n</code></pre>"},{"location":"INTEGRATION_TESTING/#metrics-and-reporting","title":"\ud83d\udcc8 Metrics and Reporting","text":""},{"location":"INTEGRATION_TESTING/#runtime-statistics","title":"Runtime Statistics","text":"<pre><code>stats := runner.GetStats()\n// Returns:\n// {\n//   \"config\": { ... },\n//   \"healthyClients\": [\"vault1\", \"vault2\"],\n//   \"circuitBreaker\": {\n//     \"state\": \"CLOSED\",\n//     \"failures\": 0,\n//     \"successes\": 5\n//   }\n// }\n</code></pre>"},{"location":"INTEGRATION_TESTING/#debug-report","title":"Debug Report","text":"<pre><code>=== Integration Test Debug Report ===\n\nTotal Events: 47\nErrors: 0\nTests: 8\n\n=== TIMING ANALYSIS ===\nhealth-check-test: 234ms (3 operations)\ncircuit-breaker-test: 1.2s (7 operations)\nunsealing-test: 891ms (4 operations)\n</code></pre>"},{"location":"INTEGRATION_TESTING/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"INTEGRATION_TESTING/#tests-hanging","title":"Tests Hanging","text":"<pre><code># Check if services are healthy\ndocker-compose -f test/environments/ci/docker-compose.fast-integration.yml ps\n\n# Run with verbose debugging\n./scripts/run-fast-integration.sh -d VERBOSE\n\n# Check debug log\ntail -f integration-debug.log\n</code></pre>"},{"location":"INTEGRATION_TESTING/#circuit-breaker-issues","title":"Circuit Breaker Issues","text":"<pre><code># Reduce failure threshold for testing\nexport INTEGRATION_DEBUG=TRACE\n./scripts/run-fast-integration.sh -f \"Circuit\"\n</code></pre>"},{"location":"INTEGRATION_TESTING/#docker-problems","title":"Docker Problems","text":"<pre><code># Clean up and restart\ndocker-compose -f test/environments/ci/docker-compose.fast-integration.yml down -v\n./scripts/run-fast-integration.sh -D -c\n</code></pre>"},{"location":"INTEGRATION_TESTING/#best-practices","title":"\ud83d\udcda Best Practices","text":""},{"location":"INTEGRATION_TESTING/#1-test-design","title":"1. Test Design","text":"<ul> <li>Keep tests focused and atomic</li> <li>Use appropriate timeouts for operations</li> <li>Include both positive and negative test cases</li> <li>Clean up resources in test cleanup</li> </ul>"},{"location":"INTEGRATION_TESTING/#2-debugging","title":"2. Debugging","text":"<ul> <li>Start with BASIC debug level</li> <li>Escalate to VERBOSE for timing issues</li> <li>Use TRACE for deep debugging</li> <li>Save debug logs for CI analysis</li> </ul>"},{"location":"INTEGRATION_TESTING/#3-ci-integration","title":"3. CI Integration","text":"<pre><code># GitHub Actions example\n- name: Fast Integration Tests\n  run: |\n    export INTEGRATION_DEBUG=BASIC\n    export INTEGRATION_DEBUG_LOG=ci-integration.log\n    ./scripts/run-fast-integration.sh -D -c -t 120s\n\n- name: Upload debug logs\n  if: failure()\n  uses: actions/upload-artifact@v3\n  with:\n    name: integration-debug-logs\n    path: ci-integration.log\n</code></pre>"},{"location":"INTEGRATION_TESTING/#4-development-workflow","title":"4. Development Workflow","text":"<pre><code># Quick feedback loop\n./scripts/run-fast-integration.sh -f \"specific-test\" -d VERBOSE\n\n# Full test suite\n./scripts/run-fast-integration.sh -D -c\n\n# Debug specific failures\n./scripts/run-fast-integration.sh -d TRACE -l debug-$(date +%s).log\n</code></pre>"},{"location":"INTEGRATION_TESTING/#migration-from-old-framework","title":"\ud83d\udea6 Migration from Old Framework","text":""},{"location":"INTEGRATION_TESTING/#old-vs-new-pattern","title":"Old vs New Pattern","text":"<pre><code>// Old (slow, hangs on failure)\nclient, err := factory.NewClient(endpoint, false, 0) // No timeout!\ntime.Sleep(30 * time.Second) // Fixed delays\nresult, err := doOperation(context.Background()) // No timeout context\n\n// New (fast, fail-fast)\nclient, err := factory.NewClient(endpoint, false, 1*time.Second)\nerr := runner.RunTestWithDebug(ctx, \"test-name\", func(testCtx context.Context) error {\n    return doOperation(testCtx) // Respects context timeout\n})\n</code></pre>"},{"location":"INTEGRATION_TESTING/#gradual-migration","title":"Gradual Migration","text":"<ol> <li>Start with new framework for new tests</li> <li>Add build tags to separate old/new tests</li> <li>Migrate critical test paths first</li> <li>Use debug output to verify behavior</li> <li>Remove old tests when confident</li> </ol>"},{"location":"INTEGRATION_TESTING/#framework-components","title":"\ud83d\udccb Framework Components","text":""},{"location":"INTEGRATION_TESTING/#core-components","title":"Core Components","text":"<ul> <li><code>IntegrationTestRunner</code>: Basic test orchestration</li> <li><code>EnhancedIntegrationTestRunner</code>: With debugging</li> <li><code>CircuitBreaker</code>: Fail-fast pattern implementation</li> <li><code>HealthChecker</code>: Service health monitoring</li> <li><code>TestLogger</code>: Structured logging and reporting</li> </ul>"},{"location":"INTEGRATION_TESTING/#test-files","title":"Test Files","text":"<ul> <li><code>fast_integration_test.go</code>: Example fast tests</li> <li><code>integration_framework.go</code>: Core framework</li> <li><code>integration_debug.go</code>: Debugging and logging</li> <li><code>test/environments/ci/docker-compose.fast-integration.yml</code>: Docker setup</li> <li><code>scripts/run-fast-integration.sh</code>: Test runner script</li> </ul> <p>This framework transforms integration testing from a slow, frustrating experience into a fast, informative development tool. \ud83c\udf89</p>"},{"location":"REFACTORING_GUIDE/","title":"Refactoring Guide: Layer-Based to Feature-Based Architecture","text":""},{"location":"REFACTORING_GUIDE/#overview","title":"Overview","text":"<p>This document provides a comprehensive guide for the architectural refactoring of the Vault Autounseal Operator from a layer-based to a feature-based package structure.</p>"},{"location":"REFACTORING_GUIDE/#migration-summary","title":"Migration Summary","text":""},{"location":"REFACTORING_GUIDE/#before-layer-based","title":"Before (Layer-Based)","text":"<pre><code>pkg/\n\u251c\u2500\u2500 api/v1/          # API types and schemas\n\u251c\u2500\u2500 controller/      # Kubernetes controllers\n\u2514\u2500\u2500 vault/           # All vault-related functionality\n</code></pre>"},{"location":"REFACTORING_GUIDE/#after-feature-based","title":"After (Feature-Based)","text":"<pre><code>pkg/\n\u251c\u2500\u2500 core/            # Core domain types\n\u251c\u2500\u2500 unsealing/       # Vault unsealing feature\n\u251c\u2500\u2500 operator/        # Kubernetes operator feature\n\u2514\u2500\u2500 testing/         # Shared testing utilities\n</code></pre>"},{"location":"REFACTORING_GUIDE/#detailed-file-mapping","title":"Detailed File Mapping","text":""},{"location":"REFACTORING_GUIDE/#core-types-migration","title":"Core Types Migration","text":"Old Location New Location Purpose <code>pkg/vault/interfaces.go</code> <code>pkg/core/types/interfaces.go</code> Core domain interfaces <code>pkg/vault/errors.go</code> <code>pkg/core/types/errors.go</code> Error types and handling"},{"location":"REFACTORING_GUIDE/#unsealing-feature-migration","title":"Unsealing Feature Migration","text":"Old Location New Location Purpose <code>pkg/vault/client.go</code> <code>pkg/unsealing/client/client.go</code> Vault HTTP client <code>pkg/vault/client_test.go</code> <code>pkg/unsealing/client/client_test.go</code> Client unit tests <code>pkg/vault/strategy.go</code> <code>pkg/unsealing/strategy/strategy.go</code> Unsealing strategies <code>pkg/vault/strategy_test.go</code> <code>pkg/unsealing/strategy/strategy_test.go</code> Strategy tests <code>pkg/vault/validator.go</code> <code>pkg/unsealing/validation/validator.go</code> Key validation <code>pkg/vault/validator_test.go</code> <code>pkg/unsealing/validation/validator_test.go</code> Validation tests"},{"location":"REFACTORING_GUIDE/#testing-infrastructure-migration","title":"Testing Infrastructure Migration","text":"Old Location New Location Purpose <code>pkg/vault/mocks.go</code> <code>pkg/testing/mocks/mocks.go</code> Mock implementations <code>pkg/vault/integration_suite_test.go</code> <code>pkg/testing/integration/testcontainers_suite.go</code> Integration test suite"},{"location":"REFACTORING_GUIDE/#files-consolidatedremoved","title":"Files Consolidated/Removed","text":"<p>The following redundant test files were identified for removal: - <code>pkg/vault/fast_integration_test.go</code> - Replaced by Testcontainers suite - <code>pkg/vault/comprehensive_test.go</code> - Functionality merged into feature-specific tests - <code>pkg/vault/load_test.go</code> - Replaced by benchmark tests - <code>pkg/vault/client_refactored_test.go</code> - Duplicate of client_test.go - <code>pkg/vault/security_edge_cases_test.go</code> - Minor edge cases, not core functionality - <code>pkg/vault/integration_extended_test.go</code> - Superseded by new integration suite - <code>pkg/vault/extended_integration_positive_test.go</code> - Redundant test cases - <code>pkg/vault/extended_integration_negative_test.go</code> - Redundant test cases</p>"},{"location":"REFACTORING_GUIDE/#code-changes-required","title":"Code Changes Required","text":""},{"location":"REFACTORING_GUIDE/#1-import-statement-updates","title":"1. Import Statement Updates","text":"<p>Before: <pre><code>import \"github.com/panteparak/vault-autounseal-operator/pkg/vault\"\n</code></pre></p> <p>After: <pre><code>import (\n    \"github.com/panteparak/vault-autounseal-operator/pkg/core/types\"\n    \"github.com/panteparak/vault-autounseal-operator/pkg/unsealing/client\"\n    \"github.com/panteparak/vault-autounseal-operator/pkg/unsealing/validation\"\n    \"github.com/panteparak/vault-autounseal-operator/pkg/unsealing/strategy\"\n)\n</code></pre></p>"},{"location":"REFACTORING_GUIDE/#2-type-references","title":"2. Type References","text":"<p>Before: <pre><code>var client *vault.Client\nvar validator vault.KeyValidator\nvar strategy vault.UnsealStrategy\n</code></pre></p> <p>After: <pre><code>var vaultClient types.VaultClient\nvar validator types.KeyValidator\nvar strategy types.UnsealStrategy\n</code></pre></p>"},{"location":"REFACTORING_GUIDE/#3-constructor-calls","title":"3. Constructor Calls","text":"<p>Before: <pre><code>client := vault.NewClient(endpoint, tlsSkip, timeout)\nvalidator := vault.NewDefaultKeyValidator()\nstrategy := vault.NewDefaultUnsealStrategy(validator, metrics)\n</code></pre></p> <p>After: <pre><code>vaultClient := client.NewClient(endpoint, tlsSkip, timeout)\nvalidator := validation.NewDefaultKeyValidator()\nstrategy := strategy.NewDefaultUnsealStrategy(validator, metrics)\n</code></pre></p>"},{"location":"REFACTORING_GUIDE/#4-error-handling","title":"4. Error Handling","text":"<p>Before: <pre><code>if vault.IsRetryableError(err) {\n    // retry logic\n}\n</code></pre></p> <p>After: <pre><code>if types.IsRetryableError(err) {\n    // retry logic\n}\n</code></pre></p>"},{"location":"REFACTORING_GUIDE/#testing-migration","title":"Testing Migration","text":""},{"location":"REFACTORING_GUIDE/#mock-usage","title":"Mock Usage","text":"<p>Before: <pre><code>mockClient := &amp;vault.MockVaultClient{}\n</code></pre></p> <p>After: <pre><code>import \"github.com/panteparak/vault-autounseal-operator/pkg/testing/mocks\"\n\nmockClient := &amp;mocks.MockVaultClient{}\n</code></pre></p>"},{"location":"REFACTORING_GUIDE/#integration-tests","title":"Integration Tests","text":"<p>Before: <pre><code>// Multiple different integration test files with varying approaches\n</code></pre></p> <p>After: <pre><code>import \"github.com/panteparak/vault-autounseal-operator/pkg/testing/integration\"\n\n// Single, unified Testcontainers-based suite\nfunc TestVaultIntegration(t *testing.T) {\n    suite.Run(t, new(integration.VaultTestSuite))\n}\n</code></pre></p>"},{"location":"REFACTORING_GUIDE/#dependency-management","title":"Dependency Management","text":""},{"location":"REFACTORING_GUIDE/#gomod-updates","title":"go.mod Updates","text":"<p>Ensure the module path is correct for all new packages:</p> <pre><code>module github.com/panteparak/vault-autounseal-operator\n\n// No additional dependencies required for the refactoring itself\n// Existing dependencies remain the same\n</code></pre>"},{"location":"REFACTORING_GUIDE/#internal-dependencies","title":"Internal Dependencies","text":"<p>The new architecture creates clear dependency flow:</p> <pre><code>core/types (no internal dependencies)\n    \u2193\nunsealing/validation \u2192 core/types\n    \u2193\nunsealing/strategy \u2192 core/types, unsealing/validation\n    \u2193\nunsealing/client \u2192 core/types, unsealing/strategy\n    \u2193\noperator/controller \u2192 core/types, unsealing/*\n    \u2193\ntesting/mocks \u2192 core/types\ntesting/integration \u2192 unsealing/client\n</code></pre>"},{"location":"REFACTORING_GUIDE/#build-and-test-configuration","title":"Build and Test Configuration","text":""},{"location":"REFACTORING_GUIDE/#makefile-updates","title":"Makefile Updates","text":"<p>Update build targets to reflect new structure:</p> <pre><code># Test specific features\ntest-core:\n    go test ./pkg/core/...\n\ntest-unsealing:\n    go test ./pkg/unsealing/...\n\ntest-operator:\n    go test ./pkg/operator/...\n\n# Integration tests\ntest-integration:\n    go test -tags=integration ./pkg/testing/integration/...\n\n# All tests\ntest-all:\n    go test ./pkg/...\n</code></pre>"},{"location":"REFACTORING_GUIDE/#cicd-pipeline-updates","title":"CI/CD Pipeline Updates","text":"<p>Update pipeline configurations to run tests for specific features:</p> <pre><code># GitHub Actions example\n- name: Test Core\n  run: go test ./pkg/core/...\n\n- name: Test Unsealing\n  run: go test ./pkg/unsealing/...\n\n- name: Test Integration\n  run: go test -tags=integration ./pkg/testing/integration/...\n</code></pre>"},{"location":"REFACTORING_GUIDE/#migration-checklist","title":"Migration Checklist","text":""},{"location":"REFACTORING_GUIDE/#phase-1-core-infrastructure","title":"Phase 1: Core Infrastructure","text":"<ul> <li>[ ] Create new package structure</li> <li>[ ] Move interfaces to <code>core/types</code></li> <li>[ ] Move error types to <code>core/types</code></li> <li>[ ] Update import statements in moved files</li> </ul>"},{"location":"REFACTORING_GUIDE/#phase-2-feature-migration","title":"Phase 2: Feature Migration","text":"<ul> <li>[ ] Move client code to <code>unsealing/client</code></li> <li>[ ] Move strategy code to <code>unsealing/strategy</code></li> <li>[ ] Move validation code to <code>unsealing/validation</code></li> <li>[ ] Update all internal imports</li> </ul>"},{"location":"REFACTORING_GUIDE/#phase-3-testing-infrastructure","title":"Phase 3: Testing Infrastructure","text":"<ul> <li>[ ] Move mocks to <code>testing/mocks</code></li> <li>[ ] Consolidate integration tests</li> <li>[ ] Remove redundant test files</li> <li>[ ] Update test imports</li> </ul>"},{"location":"REFACTORING_GUIDE/#phase-4-documentation","title":"Phase 4: Documentation","text":"<ul> <li>[ ] Update architecture documentation</li> <li>[ ] Update API documentation</li> <li>[ ] Update README files</li> <li>[ ] Create migration guide</li> </ul>"},{"location":"REFACTORING_GUIDE/#phase-5-validation","title":"Phase 5: Validation","text":"<ul> <li>[ ] Run all tests to ensure nothing is broken</li> <li>[ ] Verify build process works</li> <li>[ ] Check import paths are correct</li> <li>[ ] Validate CI/CD pipeline</li> </ul>"},{"location":"REFACTORING_GUIDE/#benefits-realized","title":"Benefits Realized","text":""},{"location":"REFACTORING_GUIDE/#1-improved-code-organization","title":"1. Improved Code Organization","text":"<ul> <li>Related functionality is co-located</li> <li>Clear feature boundaries</li> <li>Easier to understand system architecture</li> </ul>"},{"location":"REFACTORING_GUIDE/#2-enhanced-testability","title":"2. Enhanced Testability","text":"<ul> <li>Feature-specific testing</li> <li>Shared test utilities</li> <li>Better mock organization</li> </ul>"},{"location":"REFACTORING_GUIDE/#3-reduced-technical-debt","title":"3. Reduced Technical Debt","text":"<ul> <li>Removed redundant test files (8 files eliminated)</li> <li>Consolidated overlapping functionality</li> <li>Cleaner dependency structure</li> </ul>"},{"location":"REFACTORING_GUIDE/#4-better-maintainability","title":"4. Better Maintainability","text":"<ul> <li>Changes are localized to specific features</li> <li>Easier to add new functionality</li> <li>Clear ownership boundaries</li> </ul>"},{"location":"REFACTORING_GUIDE/#5-improved-developer-experience","title":"5. Improved Developer Experience","text":"<ul> <li>Faster test execution (feature-specific tests)</li> <li>Clearer code navigation</li> <li>Better IDE support</li> </ul>"},{"location":"REFACTORING_GUIDE/#rollback-plan","title":"Rollback Plan","text":"<p>If issues are discovered after migration:</p> <ol> <li>Immediate rollback: Revert to previous commit</li> <li>Selective rollback: Keep new structure but revert specific changes</li> <li>Fix-forward: Address issues while maintaining new structure</li> </ol>"},{"location":"REFACTORING_GUIDE/#future-enhancements","title":"Future Enhancements","text":"<p>The new architecture enables:</p> <ol> <li>Plugin system: Easy addition of new unsealing strategies</li> <li>Multi-backend support: Support for different Vault configurations</li> <li>Enhanced observability: Feature-specific metrics and monitoring</li> <li>Microservice extraction: Features can be extracted as separate services</li> <li>Team ownership: Clear boundaries for team responsibilities</li> </ol>"},{"location":"REFACTORING_GUIDE/#conclusion","title":"Conclusion","text":"<p>This refactoring improves the codebase's maintainability, testability, and extensibility while reducing technical debt. The feature-based architecture provides a solid foundation for future development and scaling.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>The Vault Auto-Unseal Operator is built using the Kubernetes controller-runtime framework.</p>"},{"location":"architecture/#components","title":"Components","text":"<ul> <li>Controller: Manages VaultUnsealConfig resources</li> <li>Vault Client: Secure communication with Vault instances</li> <li>CRD: Custom Resource Definition for configuration</li> <li>RBAC: Minimal required permissions</li> </ul>"},{"location":"architecture/#workflow","title":"Workflow","text":"<ol> <li>Watch VaultUnsealConfig resources</li> <li>Validate configuration and security settings</li> <li>Connect to Vault instances securely</li> <li>Monitor seal status and unseal when needed</li> <li>Update resource status with results</li> </ol>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome! Please see our development workflow.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<pre><code>git clone https://github.com/panteparak/vault-autounseal-operator.git\ncd vault-autounseal-operator\ngo mod download\nmake test\n</code></pre>"},{"location":"contributing/#conventional-commits","title":"Conventional Commits","text":"<p>We use conventional commits for semantic versioning.</p>"},{"location":"examples/","title":"Configuration Examples","text":"<p>This document provides practical examples for configuring the Vault Auto-Unseal Operator in various scenarios.</p>"},{"location":"examples/#basic-single-instance","title":"Basic Single Instance","text":"<p>The simplest configuration for a single Vault instance:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: single-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-primary\n    endpoint: http://vault:8200\n    unsealKeys:\n    - \"dGVzdC1rZXktMQ==\"  # base64: test-key-1\n    - \"dGVzdC1rZXktMg==\"  # base64: test-key-2\n    - \"dGVzdC1rZXktMw==\"  # base64: test-key-3\n    threshold: 3\n</code></pre>"},{"location":"examples/#production-https-with-tls-verification","title":"Production HTTPS with TLS Verification","text":"<p>For production deployments with proper TLS:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: production-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-prod\n    endpoint: https://vault.company.com:8200\n    unsealKeys:\n    - \"YWN0dWFsLXVuc2VhbC1rZXktMQ==\"\n    - \"YWN0dWFsLXVuc2VhbC1rZXktMg==\"\n    - \"YWN0dWFsLXVuc2VhbC1rZXktMw==\"\n    - \"YWN0dWFsLXVuc2VhbC1rZXktNA==\"\n    - \"YWN0dWFsLXVuc2VhbC1rZXktNQ==\"\n    threshold: 3  # Only need 3 out of 5 keys\n    tlsSkipVerify: false  # Verify TLS certificates (default)\n</code></pre>"},{"location":"examples/#development-with-self-signed-certificates","title":"Development with Self-Signed Certificates","text":"<p>For development environments with self-signed certificates:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: dev-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-dev\n    endpoint: https://vault.dev.local:8200\n    unsealKeys:\n    - \"ZGV2LWtleS0x\"\n    - \"ZGV2LWtleS0y\"\n    - \"ZGV2LWtleS0z\"\n    threshold: 2\n    tlsSkipVerify: true  # Skip TLS verification for dev\n</code></pre>"},{"location":"examples/#high-availability-vault-cluster","title":"High Availability Vault Cluster","text":"<p>For HA Vault deployments with pod monitoring:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: vault-ha-cluster\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-cluster\n    endpoint: https://vault-active.vault.svc.cluster.local:8200\n    unsealKeys:\n    - \"aGEta2V5LTE=\"\n    - \"aGEta2V5LTI=\"\n    - \"aGEta2V5LTM=\"\n    - \"aGEta2V5LTQ=\"\n    - \"aGEta2V5LTU=\"\n    threshold: 3\n    haEnabled: true\n    podSelector:\n      app.kubernetes.io/name: vault\n      app.kubernetes.io/component: server\n    namespace: vault  # Monitor pods in vault namespace\n</code></pre>"},{"location":"examples/#multiple-vault-instances","title":"Multiple Vault Instances","text":"<p>Managing multiple independent Vault instances:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: multi-vault-setup\n  namespace: vault-system\nspec:\n  vaultInstances:\n  # Production Vault\n  - name: vault-production\n    endpoint: https://vault-prod.company.com:8200\n    unsealKeys:\n    - \"cHJvZC1rZXktMQ==\"\n    - \"cHJvZC1rZXktMg==\"\n    - \"cHJvZC1rZXktMw==\"\n    threshold: 3\n\n  # Staging Vault\n  - name: vault-staging\n    endpoint: https://vault-staging.company.com:8200\n    unsealKeys:\n    - \"c3RhZ2luZy1rZXktMQ==\"\n    - \"c3RhZ2luZy1rZXktMg==\"\n    - \"c3RhZ2luZy1rZXktMw==\"\n    threshold: 2\n\n  # Development Vault (less secure)\n  - name: vault-development\n    endpoint: http://vault-dev.company.com:8200\n    unsealKeys:\n    - \"ZGV2LWtleS0x\"\n    - \"ZGV2LWtleS0y\"\n    - \"ZGV2LWtleS0z\"\n    threshold: 2\n    tlsSkipVerify: true\n</code></pre>"},{"location":"examples/#cross-namespace-monitoring","title":"Cross-Namespace Monitoring","text":"<p>Monitoring Vault pods in a different namespace:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: cross-namespace-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: app-vault\n    endpoint: https://vault.apps.svc.cluster.local:8200\n    unsealKeys:\n    - \"YXBwLWtleS0x\"\n    - \"YXBwLWtleS0y\"\n    - \"YXBwLWtleS0z\"\n    threshold: 2\n    haEnabled: true\n    podSelector:\n      app: vault\n      release: vault-app\n    namespace: applications  # Monitor pods in applications namespace\n</code></pre>"},{"location":"examples/#using-kubernetes-secrets-for-keys","title":"Using Kubernetes Secrets for Keys","text":"<p>Recommended approach for production:</p> <ol> <li> <p>Create the secret:    <pre><code>kubectl create secret generic vault-keys \\\n  --from-literal=key1=\"$(echo -n 'actual-unseal-key-1' | base64)\" \\\n  --from-literal=key2=\"$(echo -n 'actual-unseal-key-2' | base64)\" \\\n  --from-literal=key3=\"$(echo -n 'actual-unseal-key-3' | base64)\" \\\n  --namespace vault-system\n</code></pre></p> </li> <li> <p>Reference in VaultUnsealConfig:    <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: secure-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-secure\n    endpoint: https://vault.company.com:8200\n    unsealKeysRef:\n      secretName: vault-keys\n      keys: [\"key1\", \"key2\", \"key3\"]\n    threshold: 3\n</code></pre></p> </li> </ol>"},{"location":"examples/#external-vault-with-custom-port","title":"External Vault with Custom Port","text":"<p>Accessing Vault on a non-standard port:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: custom-port-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-custom\n    endpoint: https://vault.external.com:9200\n    unsealKeys:\n    - \"Y3VzdG9tLWtleS0x\"\n    - \"Y3VzdG9tLWtleS0y\"\n    - \"Y3VzdG9tLWtleS0z\"\n    threshold: 2\n</code></pre>"},{"location":"examples/#vault-with-load-balancer","title":"Vault with Load Balancer","text":"<p>When Vault is behind a load balancer:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: lb-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-cluster\n    endpoint: https://vault-lb.company.com:443\n    unsealKeys:\n    - \"bGItdmF1bHQta2V5LTE=\"\n    - \"bGItdmF1bHQta2V5LTI=\"\n    - \"bGItdmF1bHQta2V5LTM=\"\n    threshold: 3\n    # Note: HA monitoring might not work well with load balancers\n    # as you can't predict which pod you'll hit\n</code></pre>"},{"location":"examples/#vault-in-different-kubernetes-cluster","title":"Vault in Different Kubernetes Cluster","text":"<p>Accessing Vault running in a different Kubernetes cluster:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: external-k8s-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: remote-vault\n    endpoint: https://vault.cluster2.company.com:8200\n    unsealKeys:\n    - \"cmVtb3RlLWtleS0x\"\n    - \"cmVtb3RlLWtleS0y\"\n    - \"cmVtb3RlLWtleS0z\"\n    threshold: 2\n    # HA monitoring won't work across clusters\n    haEnabled: false\n</code></pre>"},{"location":"examples/#minimal-configuration","title":"Minimal Configuration","text":"<p>The absolute minimum required configuration:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: minimal-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault\n    endpoint: http://vault:8200\n    unsealKeys: [\"dGVzdA==\"]\n    # threshold defaults to 3, but we only have 1 key\n    threshold: 1\n</code></pre>"},{"location":"examples/#testing-configuration","title":"Testing Configuration","text":"<p>For testing and development:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: test-vault\n  namespace: default\nspec:\n  vaultInstances:\n  - name: vault-test\n    endpoint: http://localhost:8200\n    unsealKeys:\n    - \"dGVzdC1rZXktMQ==\"  # test-key-1\n    - \"dGVzdC1rZXktMg==\"  # test-key-2\n    - \"dGVzdC1rZXktMw==\"  # test-key-3\n    threshold: 1  # For testing, only require 1 key\n    tlsSkipVerify: true\n</code></pre>"},{"location":"examples/#regional-deployment","title":"Regional Deployment","text":"<p>Managing Vault instances across regions:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: multi-region-vault\n  namespace: vault-system\nspec:\n  vaultInstances:\n  # US East\n  - name: vault-us-east\n    endpoint: https://vault-us-east.company.com:8200\n    unsealKeys: [\"dXMtZWFzdC1rZXktMQ==\", \"dXMtZWFzdC1rZXktMg==\", \"dXMtZWFzdC1rZXktMw==\"]\n    threshold: 2\n\n  # US West\n  - name: vault-us-west\n    endpoint: https://vault-us-west.company.com:8200\n    unsealKeys: [\"dXMtd2VzdC1rZXktMQ==\", \"dXMtd2VzdC1rZXktMg==\", \"dXMtd2VzdC1rZXktMw==\"]\n    threshold: 2\n\n  # Europe\n  - name: vault-eu\n    endpoint: https://vault-eu.company.com:8200\n    unsealKeys: [\"ZXUtcmVnaW9uLWtleS0x\", \"ZXUtcmVnaW9uLWtleS0y\", \"ZXUtcmVnaW9uLWtleS0z\"]\n    threshold: 2\n</code></pre>"},{"location":"examples/#notes","title":"Notes","text":"<ul> <li>Always use properly base64-encoded unseal keys</li> <li>Store sensitive keys in Kubernetes secrets, not in the YAML directly</li> <li>Use <code>tlsSkipVerify: false</code> (default) in production</li> <li>Set appropriate <code>threshold</code> values based on your security requirements</li> <li>Test configurations in development before applying to production</li> <li>Monitor operator logs for any unsealing issues</li> </ul>"},{"location":"getting-started/","title":"Getting Started with Vault Auto-Unseal Operator","text":"<p>This guide will help you get started with the Vault Auto-Unseal Operator, a production-ready Kubernetes operator for automatically unsealing HashiCorp Vault instances.</p>"},{"location":"getting-started/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Prerequisites</li> <li>Installation</li> <li>Configuration</li> <li>Basic Usage</li> <li>Advanced Configuration</li> <li>Monitoring</li> <li>Troubleshooting</li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before installing the operator, ensure you have:</p> <ul> <li>Kubernetes cluster (v1.25+) with admin access</li> <li>Helm (v3.8+) installed</li> <li>kubectl configured to access your cluster</li> <li>HashiCorp Vault instance(s) deployed and initialized</li> <li>Unseal keys for your Vault instances</li> </ul>"},{"location":"getting-started/#vault-requirements","title":"Vault Requirements","text":"<ul> <li>Vault must be initialized but sealed</li> <li>Network access from Kubernetes cluster to Vault instances</li> <li>(Optional) TLS certificates if using HTTPS</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#option-1-using-helm-recommended","title":"Option 1: Using Helm (Recommended)","text":"<ol> <li> <p>Add the Helm repository (if publishing to a Helm repo):    <pre><code>helm repo add vault-operator https://panteparak.github.io/vault-autounseal-operator\nhelm repo update\n</code></pre></p> </li> <li> <p>Create a namespace:    <pre><code>kubectl create namespace vault-system\n</code></pre></p> </li> <li> <p>Install the operator:    <pre><code>helm install vault-autounseal-operator vault-operator/vault-autounseal-operator \\\n  --namespace vault-system \\\n  --set image.repository=ghcr.io/panteparak/vault-autounseal-operator \\\n  --set image.tag=latest\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#option-2-from-local-chart","title":"Option 2: From Local Chart","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/panteparak/vault-autounseal-operator.git\ncd vault-autounseal-operator\n</code></pre></p> </li> <li> <p>Create a namespace:    <pre><code>kubectl create namespace vault-system\n</code></pre></p> </li> <li> <p>Install using local chart:    <pre><code>helm install vault-autounseal-operator ./helm/vault-autounseal-operator/ \\\n  --namespace vault-system \\\n  --set image.repository=ghcr.io/panteparak/vault-autounseal-operator \\\n  --set image.tag=latest\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#option-3-using-kubectl-manual","title":"Option 3: Using kubectl (Manual)","text":"<ol> <li> <p>Apply CRDs:    <pre><code>kubectl apply -f helm/vault-autounseal-operator/templates/crd.yaml\n</code></pre></p> </li> <li> <p>Apply RBAC:    <pre><code>kubectl apply -f helm/vault-autounseal-operator/templates/rbac.yaml\n</code></pre></p> </li> <li> <p>Apply Deployment:    <pre><code>kubectl apply -f helm/vault-autounseal-operator/templates/deployment.yaml\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#configuration","title":"Configuration","text":""},{"location":"getting-started/#basic-configuration","title":"Basic Configuration","text":"<p>Create a <code>VaultUnsealConfig</code> resource to manage your Vault instances:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: my-vault-config\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-primary\n    endpoint: https://vault.example.com:8200\n    unsealKeys:\n    - \"base64-encoded-key-1\"\n    - \"base64-encoded-key-2\"\n    - \"base64-encoded-key-3\"\n    threshold: 3\n    tlsSkipVerify: false\n</code></pre>"},{"location":"getting-started/#secure-key-management","title":"Secure Key Management","text":"<p>\u26a0\ufe0f Important: Never store unseal keys in plain text. Use Kubernetes secrets:</p> <ol> <li> <p>Create a secret with your unseal keys:    <pre><code>kubectl create secret generic vault-unseal-keys \\\n  --from-literal=key1=\"your-base64-encoded-key-1\" \\\n  --from-literal=key2=\"your-base64-encoded-key-2\" \\\n  --from-literal=key3=\"your-base64-encoded-key-3\" \\\n  --namespace vault-system\n</code></pre></p> </li> <li> <p>Reference the secret in your configuration:    <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: my-vault-config\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-primary\n    endpoint: https://vault.example.com:8200\n    unsealKeysFromSecret:\n      name: vault-unseal-keys\n      keys: [\"key1\", \"key2\", \"key3\"]\n    threshold: 3\n    tlsSkipVerify: false\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#deploy-configuration","title":"Deploy Configuration","text":"<p>Apply your configuration:</p> <pre><code>kubectl apply -f vault-config.yaml\n</code></pre>"},{"location":"getting-started/#check-status","title":"Check Status","text":"<p>Monitor the operator and your Vault instances:</p> <pre><code># Check operator logs\nkubectl logs -n vault-system deployment/vault-autounseal-operator\n\n# Check VaultUnsealConfig status\nkubectl get vaultunsealconfigs -n vault-system\nkubectl describe vaultunsealconfig my-vault-config -n vault-system\n\n# View detailed status\nkubectl get vaultunsealconfig my-vault-config -n vault-system -o yaml\n</code></pre>"},{"location":"getting-started/#verify-unsealing","title":"Verify Unsealing","text":"<p>The operator will: 1. Check if Vault is sealed every 30 seconds 2. Automatically unseal using the provided keys 3. Update the status with unsealing results 4. Log all operations for monitoring</p>"},{"location":"getting-started/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/#high-availability-ha-setup","title":"High Availability (HA) Setup","text":"<p>For HA Vault deployments, enable pod monitoring:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: vault-ha-config\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-cluster\n    endpoint: https://vault.example.com:8200\n    unsealKeys:\n    - \"base64-key-1\"\n    - \"base64-key-2\"\n    - \"base64-key-3\"\n    threshold: 3\n    haEnabled: true\n    podSelector:\n      app: vault\n      component: server\n    namespace: vault-namespace\n</code></pre>"},{"location":"getting-started/#multiple-vault-instances","title":"Multiple Vault Instances","text":"<p>Manage multiple Vault instances in one configuration:</p> <pre><code>apiVersion: vault.io/v1\nkind: VaultUnsealConfig\nmetadata:\n  name: multi-vault-config\n  namespace: vault-system\nspec:\n  vaultInstances:\n  - name: vault-primary\n    endpoint: https://vault-primary.example.com:8200\n    unsealKeys: [\"key1\", \"key2\", \"key3\"]\n    threshold: 3\n  - name: vault-secondary\n    endpoint: https://vault-secondary.example.com:8200\n    unsealKeys: [\"key4\", \"key5\", \"key6\"]\n    threshold: 3\n    tlsSkipVerify: true  # Only for development\n</code></pre>"},{"location":"getting-started/#custom-helm-values","title":"Custom Helm Values","text":"<p>Customize the operator deployment:</p> <pre><code># values.yaml\nimage:\n  repository: ghcr.io/panteparak/vault-autounseal-operator\n  tag: \"v1.0.0\"\n\nresources:\n  requests:\n    memory: \"128Mi\"\n    cpu: \"100m\"\n  limits:\n    memory: \"256Mi\"\n    cpu: \"500m\"\n\nmonitoring:\n  serviceMonitor:\n    enabled: true\n    labels:\n      prometheus: kube-prometheus\n\nnodeSelector:\n  kubernetes.io/os: linux\n\ntolerations:\n- key: \"vault\"\n  operator: \"Equal\"\n  value: \"true\"\n  effect: \"NoSchedule\"\n</code></pre> <p>Install with custom values:</p> <pre><code>helm install vault-autounseal-operator ./helm/vault-autounseal-operator/ \\\n  --namespace vault-system \\\n  --values values.yaml\n</code></pre>"},{"location":"getting-started/#monitoring","title":"Monitoring","text":""},{"location":"getting-started/#prometheus-metrics","title":"Prometheus Metrics","text":"<p>The operator exposes metrics on <code>:8080/metrics</code>:</p> <ul> <li><code>vault_unseal_attempts_total</code> - Total unseal attempts</li> <li><code>vault_unseal_successes_total</code> - Successful unseals</li> <li><code>vault_unseal_failures_total</code> - Failed unseal attempts</li> <li><code>vault_instances_sealed</code> - Number of sealed instances</li> </ul>"},{"location":"getting-started/#enable-servicemonitor","title":"Enable ServiceMonitor","text":"<pre><code>monitoring:\n  serviceMonitor:\n    enabled: true\n    labels:\n      prometheus: kube-prometheus\n    interval: 30s\n</code></pre>"},{"location":"getting-started/#grafana-dashboard","title":"Grafana Dashboard","text":"<p>Import the provided Grafana dashboard from <code>examples/grafana-dashboard.json</code>.</p>"},{"location":"getting-started/#health-checks","title":"Health Checks","text":"<p>The operator provides health endpoints:</p> <ul> <li><code>:8081/healthz</code> - Liveness probe</li> <li><code>:8081/readyz</code> - Readiness probe</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Operator not starting:    <pre><code>kubectl logs -n vault-system deployment/vault-autounseal-operator\n</code></pre></p> </li> <li> <p>CRD not found:    <pre><code>kubectl get crd vaultunsealconfigs.vault.io\n</code></pre></p> </li> <li> <p>RBAC issues:    <pre><code>kubectl auth can-i get pods --as=system:serviceaccount:vault-system:vault-autounseal-operator\n</code></pre></p> </li> <li> <p>Network connectivity:    <pre><code>kubectl run debug --rm -it --image=curlimages/curl -- curl -k https://vault.example.com:8200/v1/sys/health\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging:</p> <pre><code>operator:\n  logLevel: debug\n</code></pre>"},{"location":"getting-started/#validation","title":"Validation","text":"<p>Check your configuration:</p> <pre><code># Validate YAML syntax\nkubectl apply --dry-run=client -f vault-config.yaml\n\n# Check operator events\nkubectl get events -n vault-system --sort-by='.lastTimestamp'\n</code></pre>"},{"location":"getting-started/#support","title":"Support","text":"<p>For issues and support:</p> <ol> <li>Check the troubleshooting guide</li> <li>Review GitHub issues</li> <li>Create a new issue with:</li> <li>Operator version</li> <li>Kubernetes version</li> <li>Configuration YAML</li> <li>Operator logs</li> <li>Error messages</li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about security best practices</li> <li>Explore advanced configuration</li> <li>Set up monitoring and alerting</li> <li>Review production deployment guide</li> </ul>"},{"location":"monitoring/","title":"Monitoring","text":"<p>The operator exposes Prometheus metrics and provides health endpoints.</p>"},{"location":"monitoring/#metrics","title":"Metrics","text":"<ul> <li><code>vault_unseal_attempts_total</code></li> <li><code>vault_unseal_successes_total</code></li> <li><code>vault_unseal_failures_total</code></li> <li><code>vault_instances_sealed</code></li> </ul>"},{"location":"monitoring/#health-endpoints","title":"Health Endpoints","text":"<ul> <li><code>:8081/healthz</code> - Liveness</li> <li><code>:8081/readyz</code> - Readiness</li> </ul>"},{"location":"release-process/","title":"Release Process","text":"<p>Releases are fully automated using semantic versioning.</p>"},{"location":"release-process/#how-it-works","title":"How It Works","text":"<ol> <li>Push conventional commits to main</li> <li>Semantic-release analyzes commits</li> <li>Generates version and changelog</li> <li>Builds and publishes artifacts</li> <li>Creates GitHub release</li> </ol> <p>See README for commit format examples.</p>"},{"location":"security/","title":"Security","text":"<p>Security is our top priority. This document outlines security considerations.</p>"},{"location":"security/#best-practices","title":"Best Practices","text":"<ul> <li>Store unseal keys in Kubernetes secrets</li> <li>Enable TLS verification in production</li> <li>Use least-privilege RBAC</li> <li>Monitor all operator activities</li> <li>Rotate unseal keys regularly</li> </ul>"},{"location":"security/#threat-model","title":"Threat Model","text":"<p>See SECURITY.md for detailed security information.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions.</p>"},{"location":"troubleshooting/#operator-not-starting","title":"Operator Not Starting","text":"<p>Check RBAC permissions and resource limits.</p>"},{"location":"troubleshooting/#connection-issues","title":"Connection Issues","text":"<p>Verify network connectivity and TLS configuration.</p>"},{"location":"troubleshooting/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging for detailed information.</p>"},{"location":"api/go-api/","title":"Go API","text":"<p>package v1 // import \"github.com/panteparak/vault-autounseal-operator/pkg/api/v1\"</p> <p>Package v1 contains API Schema definitions for the vault v1 API group +kubebuilder:object:generate=true +groupName=vault.io</p> <p>VARIABLES</p> <p>var (     // GroupVersion is group version used to register these objects     GroupVersion = schema.GroupVersion{Group: \"vault.io\", Version: \"v1\"}</p> <pre><code>// SchemeBuilder is used to add go types to the GroupVersionKind scheme\nSchemeBuilder = &amp;scheme.Builder{GroupVersion: GroupVersion}\n\n// AddToScheme adds the types in this group-version to the given scheme.\nAddToScheme = SchemeBuilder.AddToScheme\n</code></pre> <p>)</p> <p>TYPES</p> <p>type VaultInstance struct {     // Name is the unique identifier for this vault instance     Name string <code>json:\"name\"</code></p> <pre><code>// Endpoint is the URL of the vault instance\nEndpoint string `json:\"endpoint\"`\n\n// UnsealKeys is a list of unseal keys for this instance\nUnsealKeys []string `json:\"unsealKeys\"`\n\n// Threshold is the number of unseal keys required (default: 3)\n// +optional\nThreshold *int `json:\"threshold,omitempty\"`\n\n// TLSSkipVerify disables TLS certificate verification (default: false)\n// +optional\nTLSSkipVerify bool `json:\"tlsSkipVerify,omitempty\"`\n\n// HAEnabled indicates if this is a HA setup (default: false)\n// +optional\nHAEnabled bool `json:\"haEnabled,omitempty\"`\n\n// PodSelector selects pods to monitor for HA setups\n// +optional\nPodSelector map[string]string `json:\"podSelector,omitempty\"`\n\n// Namespace is the target namespace for pod monitoring\n// +optional\nNamespace string `json:\"namespace,omitempty\"`\n</code></pre> <p>}     VaultInstance represents a single Vault instance configuration</p> <p>func (v VaultInstance) DeepCopy() VaultInstance     DeepCopy returns a deep copy of VaultInstance</p> <p>func (v VaultInstance) DeepCopyInto(out VaultInstance)     DeepCopyInto copies all fields from this object into another</p> <p>type VaultInstanceStatus struct {     // Name of the vault instance     Name string <code>json:\"name\"</code></p> <pre><code>// Sealed indicates if the vault is sealed\nSealed bool `json:\"sealed\"`\n\n// LastUnsealed is the timestamp of the last successful unseal operation\n// +optional\nLastUnsealed *metav1.Time `json:\"lastUnsealed,omitempty\"`\n\n// Error contains any error message from the last operation\n// +optional\nError string `json:\"error,omitempty\"`\n</code></pre> <p>}     VaultInstanceStatus represents the status of a single vault instance</p> <p>func (v VaultInstanceStatus) DeepCopy() VaultInstanceStatus     DeepCopy returns a deep copy of VaultInstanceStatus</p> <p>func (v VaultInstanceStatus) DeepCopyInto(out VaultInstanceStatus)     DeepCopyInto copies all fields from this object into another</p> <p>type VaultUnsealConfig struct {     metav1.TypeMeta   <code>json:\",inline\"</code>     metav1.ObjectMeta <code>json:\"metadata,omitempty\"</code></p> <pre><code>Spec   VaultUnsealConfigSpec   `json:\"spec,omitempty\"`\nStatus VaultUnsealConfigStatus `json:\"status,omitempty\"`\n</code></pre> <p>}     VaultUnsealConfig is the Schema for the vaultunsealconfigs API</p> <p>func (v VaultUnsealConfig) DeepCopy() VaultUnsealConfig     DeepCopy returns a deep copy of VaultUnsealConfig</p> <p>func (v VaultUnsealConfig) DeepCopyInto(out VaultUnsealConfig)     DeepCopyInto copies all fields from this object into another</p> <p>func (v *VaultUnsealConfig) DeepCopyObject() runtime.Object     DeepCopyObject returns a deep copy of the object</p> <p>type VaultUnsealConfigList struct {     metav1.TypeMeta <code>json:\",inline\"</code>     metav1.ListMeta <code>json:\"metadata,omitempty\"</code>     Items           []VaultUnsealConfig <code>json:\"items\"</code> }     VaultUnsealConfigList contains a list of VaultUnsealConfig</p> <p>func (v VaultUnsealConfigList) DeepCopy() VaultUnsealConfigList     DeepCopy returns a deep copy of VaultUnsealConfigList</p> <p>func (v VaultUnsealConfigList) DeepCopyInto(out VaultUnsealConfigList)     DeepCopyInto copies all fields from this object into another</p> <p>func (v *VaultUnsealConfigList) DeepCopyObject() runtime.Object     DeepCopyObject returns a deep copy of the object</p> <p>type VaultUnsealConfigSpec struct {     // VaultInstances is a list of vault instances to manage     VaultInstances []VaultInstance <code>json:\"vaultInstances\"</code> }     VaultUnsealConfigSpec defines the desired state of VaultUnsealConfig</p> <p>func (v VaultUnsealConfigSpec) DeepCopy() VaultUnsealConfigSpec     DeepCopy returns a deep copy of VaultUnsealConfigSpec</p> <p>func (v VaultUnsealConfigSpec) DeepCopyInto(out VaultUnsealConfigSpec)     DeepCopyInto copies all fields from this object into another</p> <p>type VaultUnsealConfigStatus struct {     // Conditions represent the latest available observations     // +optional     Conditions []metav1.Condition <code>json:\"conditions,omitempty\"</code></p> <pre><code>// VaultStatuses shows the status of each vault instance\n// +optional\nVaultStatuses []VaultInstanceStatus `json:\"vaultStatuses,omitempty\"`\n</code></pre> <p>}     VaultUnsealConfigStatus defines the observed state of VaultUnsealConfig</p> <p>func (v VaultUnsealConfigStatus) DeepCopy() VaultUnsealConfigStatus     DeepCopy returns a deep copy of VaultUnsealConfigStatus</p> <p>func (v VaultUnsealConfigStatus) DeepCopyInto(out VaultUnsealConfigStatus)     DeepCopyInto copies all fields from this object into another</p>"}]}